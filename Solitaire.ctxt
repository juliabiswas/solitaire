#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment0.text=\n\ Oversees\ the\ Solitaire\ class.\n\ \n\ @param\ args\ \ information\ from\ the\ command\ line\n
comment1.params=
comment1.target=Solitaire()
comment1.text=\n\ Creates\ instances\ of\ the\ Solitaire\ class.\n
comment10.params=
comment10.target=void\ createStock()
comment10.text=\n\ Creates\ a\ shuffled\ deck\ of\ cards\ \n\ that\ is\ used\ as\ the\ stock.\n
comment11.params=
comment11.target=void\ deal()
comment11.text=\n\ Deals\ the\ cards\ from\ the\ stock\ to\ the\n\ 7\ piles.\ The\ top\ card\ of\ each\ pile\ is\ turned\n\ face\ up.\n\ \n\ @postcondition\ \ \ cards\ in\ the\ stock\ have\ been\ dealt\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ to\ each\ of\ the\ 7\ piles,\ and\ the\ top\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ card\ of\ each\ pile\ is\ face\ up\n
comment12.params=
comment12.target=void\ dealThreeCards()
comment12.text=\n\ Moves\ the\ top\ three\ cards\ from\ the\ stock\n\ to\ the\ waste.\ If\ there\ are\ less\ than\ three\n\ cards\ on\ the\ stock,\ those\ remaining\ cards\n\ are\ transferred\ to\ the\ waste.\ Cards\ in\ the\ waste\n\ should\ be\ face\ up.\n\ \n\ @postcondition\ \ \ the\ top\ three\ cards\ on\ the\ stock\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ have\ been\ moved\ to\ the\ waste\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (and\ are\ face\ up),\ but\ if\ there\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ are\ less\ than\ three\ cards\ on\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ stock,\ however\ many\ cards\ are\ left\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ are\ moved\ to\ the\ waste\n
comment13.params=
comment13.target=void\ resetStock()
comment13.text=\n\ Repeatedly\ moves\ the\ top\ card\ from\n\ the\ waste\ to\ the\ top\ of\ the\ stock\n\ until\ the\ waste\ is\ empty\ (has\n\ no\ cards).\ All\ the\ cards\ in\ the\n\ stock\ should\ be\ face\ down.\n\ \n\ @postcondition\ \ \ the\ waste\ is\ empty,\ and\ the\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ stock\ contains\ the\ cards\ that\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ were\ previously\ in\ the\ waste\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (and\ the\ cards\ are\ face\ up)\n
comment14.params=card\ index
comment14.target=boolean\ canAddToPile(Card,\ int)
comment14.text=\n\ Checks\ if\ a\ given\ card\ can\ be\ moved\n\ to\ the\ given\ pile\ (following\ the\ rules\n\ of\ solitaire).\n\ \n\ @precondition\ \ \ \ 0\ <\=\ index\ <\ 7\n\ @postcondition\ \ \ Returns\ true\ if\ the\ given\ card\ can\ be\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ legally\ moved\ to\ the\ top\ of\ the\ given\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ pile\n
comment15.params=index
comment15.target=java.util.Stack\ removeFaceUpCards(int)
comment15.text=\n\ Removes\ all\ the\ face-up\ cards\ in\ a\ given\ pile\n\ and\ returns\ a\ stack\ of\ those\ cards.\n\ \n\ @precondition\ \ \ \ \ 0\ <\=\ index\ <\ 7\n\ @postcondition\ \ \ \ Removes\ all\ face-up\ cards\ on\ the\ top\ of\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ given\ pile;\ returns\ a\ stack\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ containing\ these\ cards\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \n\ @return\ \ \ \ \ \ \ \ \ \ a\ stack\ that\ contains\ all\ the\ face-up\ cards\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ that\ have\ been\ removed\n
comment16.params=cards\ index
comment16.target=void\ addToPile(java.util.Stack,\ int)
comment16.text=\n\ Adds\ the\ cards\ in\ the\ given\ stack\ to\ the\ pile\n\ with\ the\ given\ index.\n\ \n\ @precondition\ \ \ \ 0\ <\=\ index\ <\ 7\n\ @postcondition\ \ \ Removes\ elements\ from\ cards,\ and\ adds\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ them\ to\ the\ given\ pile.\n
comment17.params=card\ index
comment17.target=boolean\ canAddToFoundation(Card,\ int)
comment17.text=\n\ @precondition\ \ \ \ \ 0\ <\=\ index\ <\ 4\n\ @postcondition\ \ \ \ Returns\ true\ if\ the\ given\ card\ can\ be\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ legally\ moved\ to\ the\ top\ of\ the\ given\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ foundation\n
comment2.params=
comment2.target=Card\ getStockCard()
comment2.text=\n\ Retrieves\ the\ card\ on\ the\ top\ of\ the\ stock,\n\ or\ null\ if\ the\ stock\ is\ empty.\n\ \n\ @return\ the\ card\ on\ the\ top\ of\ the\ stock,\n\ or\ null\ if\ the\ stock\ is\ empty\n
comment3.params=
comment3.target=Card\ getWasteCard()
comment3.text=\n\ Retrieves\ the\ card\ on\ top\ of\ the\ waste,\n\ or\ null\ if\ the\ waste\ is\ empty.\n\ \n\ @return\ the\ card\ on\ top\ of\ the\ waste,\n\ or\ null\ if\ the\ waste\ is\ empty\n
comment4.params=index
comment4.target=Card\ getFoundationCard(int)
comment4.text=\n\ Retrieves\ the\ card\ on\ top\ of\ the\ given\ foundation,\n\ or\ null\ if\ the\ foundation\ is\ empty.\n\ \n\ @param\ index\ \ \ \ \ the\ given\ foundation\n\ \n\ @precondition\ \ \ \ 0\ <\=\ index\ <\ 4\n\ @postcondition\ \ \ returns\ the\ card\ on\ top\ of\ the\ given\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ foundation,\ or\ null\ if\ the\ foundation\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ is\ empty\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \n\ @return\ \ the\ card\ on\ top\ of\ the\ given\ foundation,\n\ \ \ \ \ \ \ \ \ \ or\ null\ if\ the\ foundation\ is\ empty\n
comment5.params=index
comment5.target=java.util.Stack\ getPile(int)
comment5.text=\n\ Retrieves\ a\ reference\ to\ the\ given\ pile.\n\ \n\ @param\ index\ \ \ \ \ \ \ \ \ the\ index\ of\ the\ pile\n\ \n\ @precondition\ \ \ \ \ \ \ \ 0\ <\=\ index\ <\ 7\n\ @postcondition\ \ \ \ \ \ \ returns\ a\ reference\ to\ the\ given\ pile\n\ \n\ @return\ a\ reference\ to\ the\ given\ pile\n
comment6.params=
comment6.target=void\ stockClicked()
comment6.text=\n\ Tests\ if\ the\ stock\ has\ any\ cards\ left.\n\ If\ it\ does,\ it\ transfers\ three\ cards\n\ to\ the\ waste.\ If\ not,\ it\ resets\ the\ stock.\n\ This\ method\ is\ called\ when\ the\ stock\ is\ \n\ clicked.\n\ \n\ @postcondition\ \ \ if\ the\ stock\ had\ cards\ left,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ three\ cards\ have\ been\ transferred\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ to\ the\ waste,\ but\ if\ not,\ the\ stock\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ has\ been\ reset\n
comment7.params=
comment7.target=void\ wasteClicked()
comment7.text=\n\ Selects\ the\ waste\ if\ it\ isn't\ empty\n\ (and\ neither\ the\ waste\ nor\ another\n\ pile\ is\ already\ selected).\ Unselects\n\ the\ waste\ if\ it\ is\ already\ selected.\n\ This\ method\ is\ called\ when\ the\ waste\ is\n\ clicked.\n\ \n\ @postcondition\ \ \ if\ the\ waste\ isn't\ empty\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ and\ neither\ the\ waste\ nor\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ another\ pile\ is\ already\ selected,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ waste\ is\ selected,\ but\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ waste\ is\ already\ selected,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ it\ is\ unselected\n
comment8.params=index
comment8.target=void\ foundationClicked(int)
comment8.text=\n\ Adds\ the\ selected\ card\ to\ the\ given\n\ foundation\ if\ the\ operation\ is\ legal.\n\ This\ method\ is\ called\ when\ the\n\ given\ foundation\ is\ clicked.\n\ \n\ @param\ index\ \ \ \ \ the\ index\ of\ the\ foundation\n\ \n\ @precondition\ \ \ \ 0\ <\=\ index\ <\ 4\n\ @postcondtion\ \ \ \ if\ possible,\ the\ selected\ card\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ has\ been\ added\ to\ the\ given\ foundation\n
comment9.params=index
comment9.target=void\ pileClicked(int)
comment9.text=\n\ If\ the\ waste\ is\ selected,\ moves\ the\ \n\ top\ card\ from\ the\ waste\ onto\ the\ top\ of\ \n\ the\ given\ pile.\ Then,\ the\ waste\ is\ \n\ unselected.\ This\ method\ is\ called\ when\ \n\ the\ given\ pile\ is\ clicked.\n\ \n\ @param\ index\ \ \ \ \ the\ index\ of\ the\ given\ pile\n\ \n\ @precondition\ \ \ \ 0\ <\=\ index\ <\ 7\n\ @postcondition\ \ \ if\ the\ waste\ is\ selected,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ top\ card\ from\ the\ waste\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ has\ been\ moved\ onto\ the\ top\ of\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ given\ pile,\ and\ waste\ has\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ been\ unselected\n
numComments=18
